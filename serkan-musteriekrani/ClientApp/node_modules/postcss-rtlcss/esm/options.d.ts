import { Container, Root, Rule, AtRule } from "postcss";
type DeclarationContainer = Rule | AtRule;
declare enum Mode {
    combined = "combined",
    override = "override",
    diff = "diff"
}
declare enum Source {
    ltr = "ltr",
    rtl = "rtl"
}
type RuleParser = (parsers: Parsers, container: Container, parentSourceDirective?: string, parentFreezeDirectiveActive?: boolean, hasParentRule?: boolean) => void;
type AtRuleParser = (parsers: Parsers, container: Container, parentSourceDirective?: string, parentFreezeDirectiveActive?: boolean, hasParentRule?: boolean) => void;
type KeyframeParser = (css: Root) => void;
type DeclarationParser = (container: DeclarationContainer, hasParentRule: boolean, ruleSourceDirectiveValue: string, parentFreezeDirectiveActive: boolean, processRule: boolean, rename: boolean) => void;
type Parsers = {
    parseRules: RuleParser;
    parseAtRules: AtRuleParser;
    parseKeyFrames: KeyframeParser;
    parseDeclarations: DeclarationParser;
};
export { Mode, Source };
